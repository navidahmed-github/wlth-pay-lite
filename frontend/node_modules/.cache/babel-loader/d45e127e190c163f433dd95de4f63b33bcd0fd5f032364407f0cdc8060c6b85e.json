{"ast":null,"code":"var _jsxFileName = \"/Users/navidahmed/Lab/wlth-pay-lite/src/pages/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PaymentForm from '../components/PaymentForm';\nimport TransactionTable from '../components/TransactionTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // API URL (Ensure it's valid or fallback to a placeholder)\n  const API_URL = process.env.REACT_APP_API_BASE_URL || 'https://ziagg50mj8.execute-api.us-east-1.amazonaws.com/default/transactionsHandler';\n\n  // Fetch transactions on component load\n  useEffect(() => {\n    const fetchTransactions = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        const response = await axios.get(API_URL);\n        console.log('API Response:', response.data);\n        if (Array.isArray(response.data)) {\n          setTransactions(response.data); // Assign valid data\n        } else {\n          throw new Error('Invalid response format');\n        }\n      } catch (err) {\n        console.error('Error fetching transactions:', err);\n        setError('Failed to fetch transactions. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTransactions();\n  }, [API_URL]);\n\n  // Add a new transaction\n  const addTransaction = async newTransaction => {\n    const date = new Date().toISOString().split('T')[0]; // Current date in YYYY-MM-DD format\n\n    try {\n      const response = await axios.post(API_URL, {\n        ...newTransaction,\n        date\n      });\n      setTransactions(prev => [...prev, response.data]); // Append new transaction\n    } catch (err) {\n      console.error('Error adding transaction:', err);\n      setError('Failed to add transaction. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-6\",\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading transactions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(PaymentForm, {\n      onAddTransaction: addTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"Transaction History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TransactionTable, {\n        transactions: transactions,\n        loading: loading,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"NNOjaYgS+2QCTWof0Leq6Xd62fY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","PaymentForm","TransactionTable","jsxDEV","_jsxDEV","Dashboard","_s","transactions","setTransactions","loading","setLoading","error","setError","API_URL","process","env","REACT_APP_API_BASE_URL","fetchTransactions","response","get","console","log","data","Array","isArray","Error","err","addTransaction","newTransaction","date","Date","toISOString","split","post","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddTransaction","_c","$RefreshReg$"],"sources":["/Users/navidahmed/Lab/wlth-pay-lite/src/pages/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PaymentForm from '../components/PaymentForm';\nimport TransactionTable from '../components/TransactionTable';\n\ninterface Transaction {\n  id: string;\n  recipient: string;\n  amount: number;\n  method: string;\n  date: string;\n}\n\nconst Dashboard: React.FC = () => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // API URL (Ensure it's valid or fallback to a placeholder)\n  const API_URL = process.env.REACT_APP_API_BASE_URL || 'https://ziagg50mj8.execute-api.us-east-1.amazonaws.com/default/transactionsHandler';\n\n  // Fetch transactions on component load\n  useEffect(() => {\n    const fetchTransactions = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        const response = await axios.get(API_URL);\n        console.log('API Response:', response.data);\n        if (Array.isArray(response.data)) {\n          setTransactions(response.data); // Assign valid data\n        } else {\n          throw new Error('Invalid response format');\n        }\n      } catch (err) {\n        console.error('Error fetching transactions:', err);\n        setError('Failed to fetch transactions. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTransactions();\n  }, [API_URL]);\n\n  // Add a new transaction\n  const addTransaction = async (newTransaction: { recipient: string; amount: number; method: string }) => {\n    const date = new Date().toISOString().split('T')[0]; // Current date in YYYY-MM-DD format\n\n    try {\n      const response = await axios.post(API_URL, { ...newTransaction, date });\n      setTransactions((prev) => [...prev, response.data]); // Append new transaction\n    } catch (err) {\n      console.error('Error adding transaction:', err);\n      setError('Failed to add transaction. Please try again later.');\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-3xl font-bold mb-6\">Dashboard</h1>\n      \n      {/* Loading and Error States */}\n      {loading && <p>Loading transactions...</p>}\n      {error && <p className=\"text-red-500\">{error}</p>}\n\n      {/* Payment Form for adding transactions */}\n      <PaymentForm onAddTransaction={addTransaction} />\n\n      <div className=\"mt-8\">\n        <h2 className=\"text-2xl font-bold mb-4\">Transaction History</h2>\n\n        {/* Transaction Table for displaying transactions */}\n        <TransactionTable transactions={transactions} loading={loading} error={error} />\n        </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}